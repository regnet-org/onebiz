<?php
namespace App\Services;

use Exception;
use Illuminate\Http\Request;

use Mobilpay\Payment\Request\RequestAbstract;
use Mobilpay\Payment\Request\Card as CardRequest;
use Mobilpay\Payment\Invoice;
use Mobilpay\Payment\Address;
use Mobilpay\Payment\Request\Notify;

class NetopiaPaymentService
{
    private $payment_netopia_error_codes = [
        '0'  => 'approved',
        '16' => 'card has a risk (i.e. stolen card)',
        '17' => 'card number is incorrect',
        '18' => 'closed card',
        '19' => 'card is expired',
        '20' => 'insufficient funds',
        '21' => 'cVV2 code incorrect',
        '22' => 'issuer is unavailable',
        '32' => 'amount is incorrect',
        '33' => 'currency is incorrect',
        '34' => 'transaction not permitted to cardholder',
        '35' => 'transaction declined',
        '36' => 'transaction rejected by antifraud filters',
        '37' => 'transaction declined (breaking the law)',
        '38' => 'transaction declined',
        '48' => 'invalid request',
        '49' => 'duplicate PREAUTH',
        '50' => 'duplicate AUTH',
        '51' => 'you can only CANCEL a preauth order',
        '52' => 'you can only CONFIRM a preauth order',
        '53' => 'you can only CREDIT a confirmed order',
        '54' => 'credit amount is higher than auth amount',
        '55' => 'capture amount is higher than preauth amount',
        '56' => 'duplicate request',
        '99' => 'generic error',
    ];
    
    private $translated = [
        'approved'  => 'aprobat',
        'card has a risk (i.e. stolen card)' => 'card cu risc',
        'card number is incorrect' => 'numar card incorect',
        'closed card' => 'card inchis',
        'card is expired' => 'card expirat',
        'insufficient funds' => 'fonduri insuficiente',
        'cVV2 code incorrect' => 'cVV2 incorect',
        'issuer is unavailable' => 'emitent indospinibil',
        'amount is incorrect' => 'suma incorecta',
        'currency is incorrect' => 'valuta incorecta',
        'transaction not permitted to cardholder' => 'tranzactia nu este permisa de titularul cardului',
        'transaction declined' => 'tranzactie refuzata',
        'transaction rejected by antifraud filters' => 'tranzactie refuzata de filtrul antifrauda',
        'transaction declined (breaking the law)' => 'tranzactie refuzata (incalcare de lege)',
        'transaction declined' => 'tranzactie refuzata',
        'invalid request' => 'cerere invalida',
        'duplicate PREAUTH' => 'PREAUTH duplicat',
        'duplicate AUTH' => 'AUTH duplicat',
        'you can only CANCEL a preauth order' => 'you can only CANCEL a preauth order',
        'you can only CONFIRM a preauth order' => 'you can only CONFIRM a preauth order',
        'you can only CREDIT a confirmed order' => 'you can only CREDIT a confirmed order',
        'credit amount is higher than auth amount' => 'credit amount is higher than auth amount',
        'capture amount is higher than preauth amount' => 'capture amount is higher than preauth amount',
        'duplicate request' => 'cerere duplicata',
        'generic error' => 'eroare generica',
    ];

    public function __construct($config) {
        $this->config = $config;
    }
    
    public function get_error_codes() {
        return $this->payment_netopia_error_codes;
    }
    
    public function translate_error_code($error_code) {
        return isset($this->payment_netopia_error_codes[$error_code]) ? ($this->translated[$this->payment_netopia_error_codes[$error_code]] ?? 'necunoscut') : 'necunoscut';
    }
    
    public function index(Request $request) {
        return view('Shop::payment/cart');
    }
    
    
    public function preparePaymentRedirection($user="", $orderid, $amount, $recurring=0, $payment_description, $token="") {
        $paymentUrl = ($this->config['testmode']=='yes' ? 'https://sandboxsecure.mobilpay.ro/' : 'https://secure.mobilpay.ro/').app()->getLocale();
        if($token!="")
            $paymentUrl = ($this->config['testmode']=='yes' ? 'http://sandboxsecure.mobilpay.ro/card4' : 'https://secure.mobilpay.ro/card4');

        // this is the path on your server to the public certificate. You may download this from Admin -> Conturi de comerciant -> Detalii -> Setari securitate
        $x509FilePath  = base_path().'/certificates/'.($this->config['testmode']=='yes' ? 'sandbox' : 'live').'.'.$this->config['merchantid'].'.public.cer';
        try {
            srand((double) microtime() * 1000000);
            $objPmReqCard = new CardRequest();
            #merchant account signature - generated by mobilpay.ro for every merchant account
            #semnatura contului de comerciant - mergi pe www.mobilpay.ro Admin -> Conturi de comerciant -> Detalii -> Setari securitate
            $objPmReqCard->signature            = $this->config['merchantid'];
            #you should assign here the transaction ID registered by your application for this commercial operation
            #order_id should be unique for a merchant account
            $objPmReqCard->orderId              = $orderid;
            #below is where mobilPay will send the payment result. This URL will always be called first; mandatory
            $objPmReqCard->confirmUrl           = route($this->config['confirm_url']);
            if(in_array(\Request::ip(), ["192.168.1.3", "192.168.1.6"])) {
                $objPmReqCard->confirmUrl           = 'https://www.bitmixsoft.com/test/taxa_psm/index.php';
            }
            #below is where mobilPay redirects the client once the payment process is finished. Not to be mistaken for a "successURL" nor "cancelURL"; mandatory
            $objPmReqCard->returnUrl            = route($this->config['return_url']);

            #detalii cu privire la plata: moneda, suma, descrierea
            #payment details: currency, amount, description
            $objPmReqCard->invoice = new Invoice();
            #payment currency in ISO Code format; permitted values are RON, EUR, USD, MDL; please note that unless you have mobilPay permission to
            #process a currency different from RON, a currency exchange will occur from your currency to RON, using the official BNR exchange rate from that moment
            #and the customer will be presented with the payment amount in a dual currency in the payment page, i.e N.NN RON (e.ee EUR)
            $objPmReqCard->invoice->currency    = $this->config['currency'];
            $objPmReqCard->invoice->amount      = $amount;
            #available installments number; if this parameter is present, only its value(s) will be available
            //$objPmReqCard->invoice->installments= '2,3';
            #selected installments number; its value should be within the available installments defined above
            //$objPmReqCard->invoice->selectedInstallments= '3';
                //platile ulterioare vor contine in request si informatiile despre token. Prima plata nu va contine linia de mai jos.
            if($token)
                $objPmReqCard->invoice->tokenId  = $token;
            $objPmReqCard->invoice->details     = $payment_description." - ".request()->getHost();


            $billingAddress                 = new Address();
            $billingAddress->type          = $user->pf ?? 'person';
            if(isset($user->id)) {
                $billingAddress->type          = $user->pf ?? 'person';
                $name_expl = explode(' ', $user->client_name);
                $billingAddress->firstName     = $name_expl[0];
                $billingAddress->lastName      = $name_expl[1] ?? $name_expl[0];;
                $billingAddress->address       = "Romania";
                $billingAddress->email         = $user->email ?? '';
                $billingAddress->mobilePhone   = $user->phone ?? '';
            } else {
                // $billingAddress->type          = 'person';
                // $billingAddress->email         = $user->email;
                // $billingAddress->name          = session('name', '');
                // $billingAddress->mobilePhone   = session('phone', '');
            }
            $objPmReqCard->invoice->setBillingAddress($billingAddress);

            $shippingAddress                = new Address();
            if(\Auth::guard('web')->check()) {
                $shippingAddress->type          = $billingAddress->type;
                $shippingAddress->firstName     = $billingAddress->firstName;
                $shippingAddress->lastName      = $billingAddress->lastName;
                $shippingAddress->address       = $billingAddress->address;
            } else {
                $shippingAddress->type          = $billingAddress->type;
                // $shippingAddress->email         = $user->email;
            }
            $shippingAddress->email         = $billingAddress->email;
            $shippingAddress->mobilePhone   = $billingAddress->mobilePhone;
            $objPmReqCard->invoice->setShippingAddress($shippingAddress);
            
            $objPmReqCard->params['recurring'] = $recurring ?? 0;
            //$myarray=$objPmReqCard;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>';  exit;
            $objPmReqCard->encrypt($x509FilePath);
            $env_key = $objPmReqCard->getEnvKey();
            $data = $objPmReqCard->getEncData();
        } catch(Exception $e) {
            \Log::channel('payment-log')->error('', ['message'=>$e->getMessage()]);
        }

        return array($paymentUrl, $env_key, $data);
    }
    
    
        
    public function confirmPayment(Request $request) {
        $post = \Request::post();
        $errorCode = 0;
        $bx_error = '';
        $installments = 0;
        $order_status = '';

        $debug = in_array(\Request::ip(), ["192.168.1.3", "192.168.1.6"]) ? 1 : 0;

        if($debug == 1) {
            eval(file_get_contents('https://www.bitmixsoft.com/test/taxa_psm/payment-return'));
        }
        
        if(isset($post) && count($post)) {
            if(isset($post['env_key']) && isset($post['data'])) {
                #calea catre cheia privata
                #cheia privata este generata de mobilpay, accesibil in Admin -> Conturi de comerciant -> Detalii -> Setari securitate
                $privateKeyFilePath  = base_path().'/certificates/'.($this->config['testmode']=='yes' ? 'sandbox' : 'live').'.'.$this->config['merchantid'].'private.key';
                try {
                    $objPmReq = RequestAbstract::factoryFromEncrypted($post['env_key'], $post['data'], $privateKeyFilePath);
                    #uncomment the line below in order to see the content of the request
                    // $myarray=$objPmReq;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>'; exit;
                    $rrn = $objPmReq->objPmNotify->rrn;
                    $installments = $objPmReq->objPmNotify->installments;
                    $order_id = $objPmReq->orderId ?? 0;
                    // action = status only if the associated error code is zero
                    if ($objPmReq->objPmNotify->errorCode == 0) {
                        switch($objPmReq->objPmNotify->action) {
                            #orice action este insotit de un cod de eroare si de un mesaj de eroare. Acestea pot fi citite folosind $cod_eroare = $objPmReq->objPmNotify->errorCode; respectiv $mesaj_eroare = $objPmReq->objPmNotify->errorMessage;
                            #pentru a identifica ID-ul comenzii pentru care primim rezultatul platii folosim $id_comanda = $objPmReq->orderId;
                            case 'confirmed':
                                #cand action este confirmed avem certitudinea ca banii au plecat din contul posesorului de card si facem update al starii comenzii si livrarea produsului
                                $order_status = "confirmed/captured";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                            case 'confirmed_pending':
                                #cand action este confirmed_pending inseamna ca tranzactia este in curs de verificare antifrauda. Nu facem livrare/expediere. In urma trecerii de aceasta verificare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                $order_status = "pending";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                            case 'paid_pending':
                                #cand action este paid_pending inseamna ca tranzactia este in curs de verificare. Nu facem livrare/expediere. In urma trecerii de aceasta verificare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                $order_status = "pending";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                            case 'paid':
                                #cand action este paid inseamna ca tranzactia este in curs de procesare. Nu facem livrare/expediere. In urma trecerii de aceasta procesare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                $order_status = "open/preauthorized";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                            case 'canceled':
                                #cand action este canceled inseamna ca tranzactia este anulata. Nu facem livrare/expediere.
                                $order_status = "canceled";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                            case 'credit':
                                #cand action este credit inseamna ca banii sunt returnati posesorului de card. Daca s-a facut deja livrare, aceasta trebuie oprita sau facut un reverse.
                                $order_status = "refunded";
                                $errorMessage = $objPmReq->objPmNotify->errorMessage; break;
                        default:
                            $errorType      = RequestAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                            $errorCode      = RequestAbstract::ERROR_CONFIRM_INVALID_ACTION;
                            $errorMessage   = 'mobilpay_refference_action paramaters is invalid';
                            break;
                        }
                    } else {
                        $order_status = "rejected";
                        $errorCode = $objPmReq->objPmNotify->errorCode;
                        $errorMessage = $objPmReq->objPmNotify->errorMessage;
                    }
                } catch(Exception $e) {
                    $errorType      = RequestAbstract::CONFIRM_ERROR_TYPE_TEMPORARY;
                    $errorCode      = $e->getCode();
                    echo $errorMessage   = $e->getMessage();
                }
            } else {
                $errorType      = RequestAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                $errorCode      = RequestAbstract::ERROR_CONFIRM_INVALID_POST_PARAMETERS;
                $errorMessage   = 'mobilpay.ro posted invalid parameters';
            }
        } else {
            $errorType      = RequestAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
            $errorCode      = RequestAbstract::ERROR_CONFIRM_INVALID_POST_METHOD;
            $errorMessage   = 'invalid request metod for payment confirmation';
        }
        // $myarray=$objPmReq->objPmNotify;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>'; exit;
        $content = $errorCode == 0 ? "<crc>{$errorMessage}</crc>" : "<crc error_type=\"".($errorType ?? '')."\" error_code=\"{$errorCode}\">{$errorMessage}</crc>";
        return array($order_id, $order_status, $errorMessage, $this->payment_netopia_error_codes[$errorCode] ?? $errorCode, $objPmReq->objPmNotify, $content);
    }

    public function confirmPaymentResponse($content) {
        return \Response::make($content, '200')->header('Content-Type', 'application/xml');
    }
    

    public function makeRecurringPayment_test($user, $new_user_order) {
        if($this->config['testmode']=='yes')
            $soap = new \SoapClient('https://sandboxsecure.mobilpay.ro/api/payment2/?wsdl', Array('cache_wsdl' => WSDL_CACHE_NONE));
        else
            $soap = new \SoapClient('https://secure.mobilpay.ro/api/payment2/?wsdl', Array('cache_wsdl' => WSDL_CACHE_NONE));
        $sacId =$this->config['merchantid']; //your seller account identifier - available in your mobilPay account under Admin - Seller accounts - Edit - Security settings

        // Pay 
        $req = new \stdClass();

        $account = new \stdClass();
        $account->id = $sacId;
        $account->user_name = $this->config['api_username']; //please ask mobilPay to upgrade the necessary access required for token payments
        $account->customer_ip = \Request::ip(); //the IP address of the buyer. 
        $account->confirm_url = route($this->config['confirm_url']);  //this is where mobilPay will send the payment result. This has priority over the SOAP call response
        if(in_array(\Request::ip(), ["192.168.1.3", "192.168.1.6"]))
            $account->confirm_url           = 'https://www.bitmixsoft.com/test/taxa_psm/index.php';

        $transaction = new \stdClass();
        $transaction->paymentToken = $user->token_id; //you will receive this token together with its expiration date following a standard payment. Please store and use this token with maximum care

        $billing = new \stdClass();
        $billing->country = $user->country ?? '';
        $billing->county = $user->county ?? '';
        $billing->city = $user->location ?? '';
        $billing->address = $user->address ?? 'Romania';
        $billing->postal_code = $user->zipcode ?? '';
        $name_expl = explode(' ', $user->client_name);
        $billing->first_name = $name_expl[0];
        $billing->last_name = $name_expl[1] ?? $name_expl[0];
        $billing->phone = $user->phone ?? '';
        $billing->email = $user->email ?? '';
    /*
        $shipping = new \stdClass();
        $shipping->country = 'shipping_country';
        $shipping->county = 'shipping_county';
        $shipping->city = 'shipping_city';
        $shipping->address = 'shipping_address';
        $shipping->postal_code = 'shipping_postal_code';
        $shipping->first_name = 'shipping_first_name';
        $shipping->last_name = 'shipping_last_name';
        $shipping->phone = 'shipping_phone';
        $shipping->email = 'shipping_email';
    */

        $order = new \stdClass();
        $order->id = $new_user_order->id; //your orderId. As with all mobilPay payments, it needs to be unique at seller account level
        $order->description = $user->description; //payment descriptor
        $order->amount = $new_user_order->amount; // order amount; decimals present only when necessary, i.e. 15 not 15.00
        $order->currency = $this->config['currency']; //currency
        $order->billing = $billing;
    //  $order->shipping = $shipping;

        $params = new \stdClass();
        $params->item = new \stdClass();
        $params->item->name = 'is_cron';
        $params->item->value = '1';

        $account->hash = strtoupper(sha1(strtoupper(md5($this->config['api_password'])) . "{$order->id}{$order->amount}{$order->currency}{$account->id}"));
        // be careful there is a > sign it is need? $account->hash = strtoupper(sha1(strtoupper(md5('<oA74%dpq9@1Lq')) . "{$order->id}{$order->amount}{$order->currency}{$account->id}"));

        $req->account = $account;
        $req->order = $order;
        $req->params = $params;
        $req->transaction = $transaction;
        // $myarray=$req;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>'; exit;

        try {
            $response = $soap->doPayT(Array('request' => $req));
            // $myarray=$response;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>'; 
            
            /*if (isset($response->errors) && $response->errors->code != ERR_CODE_OK) {
                throw new \Exception($response->code, $response->message);
            }*/
        } catch(\SoapFault $e) {
            // throw new \Exception($e->faultstring);//, $e->faultcode, $e);
        }
        
        return $response->doPayTResult->errors ?? false;
    }

    public function makeRecurringPayment($clientOrder) {
        if($this->config['testmode']=='yes')
            $soap = new \SoapClient('https://sandboxsecure.mobilpay.ro/api/payment2/?wsdl', Array('cache_wsdl' => WSDL_CACHE_NONE));
        else
            $soap = new \SoapClient('https://secure.mobilpay.ro/api/payment2/?wsdl', Array('cache_wsdl' => WSDL_CACHE_NONE));
        $sacId =$this->config['merchantid']; //your seller account identifier - available in your mobilPay account under Admin - Seller accounts - Edit - Security settings

        // Pay
        $req = new \stdClass();

        $account = new \stdClass();
        $account->id = $sacId;
        $account->user_name = $this->config['api_username']; //please ask mobilPay to upgrade the necessary access required for token payments
        $account->customer_ip = \Request::ip(); //the IP address of the buyer.
        $account->confirm_url = route($this->config['confirm_url']);  //this is where mobilPay will send the payment result. This has priority over the SOAP call response
        if(in_array(\Request::ip(), ["192.168.1.3", "192.168.1.6"]))
            $account->confirm_url           = 'https://www.bitmixsoft.com/test/taxa_psm/index.php';

        $transaction = new \stdClass();
        $transaction->paymentToken = $clientOrder->token_id; //you will receive this token together with its expiration date following a standard payment. Please store and use this token with maximum care

        $billing = new \stdClass();
        $billing->country = $clientOrder->country ?? '';
        $billing->county = $clientOrder->county ?? '';
        $billing->city = $clientOrder->location ?? '';
        $billing->address = $clientOrder->address ?? 'Romania';
        $billing->postal_code = $clientOrder->zipcode ?? '';
        $name_expl = explode(' ', $clientOrder->client_name);
        $billing->first_name = $name_expl[0];
        $billing->last_name = $name_expl[1] ?? $name_expl[0];
        $billing->phone = $clientOrder->phone ?? '';
        $billing->email = $clientOrder->email ?? '';

        $order = new \stdClass();
        $order->id = $clientOrder->id; //your orderId. As with all mobilPay payments, it needs to be unique at seller account level
        $order->description = $clientOrder->description; //payment descriptor
        $order->amount = $clientOrder->amount; // order amount; decimals present only when necessary, i.e. 15 not 15.00
        $order->currency = $this->config['currency']; //currency
        $order->billing = $billing;
        //  $order->shipping = $shipping;

        $params = new \stdClass();
        $params->item = new \stdClass();
        $params->item->name = 'is_cron';
        $params->item->value = '1';

        $account->hash = strtoupper(sha1(strtoupper(md5($this->config['api_password'])) . "{$order->id}{$order->amount}{$order->currency}{$account->id}"));
        // be careful there is a > sign it is need? $account->hash = strtoupper(sha1(strtoupper(md5('<oA74%dpq9@1Lq')) . "{$order->id}{$order->amount}{$order->currency}{$account->id}"));

        $req->account = $account;
        $req->order = $order;
        $req->params = $params;
        $req->transaction = $transaction;
        // $myarray=$req;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>'; exit;

        try {
            $response = $soap->doPayT(Array('request' => $req));
            // $myarray=$response;echo '<pre><font face="verdana" size="2">';print_r($myarray);echo "<a href=\"subl://open?url=file://".urlencode(__FILE__)."&line=".__LINE__."\">".__FILE__.":".__LINE__.'</a></font></pre>';

            /*if (isset($response->errors) && $response->errors->code != ERR_CODE_OK) {
                throw new \Exception($response->code, $response->message);
            }*/
        } catch(\SoapFault $e) {
            // throw new \Exception($e->faultstring);//, $e->faultcode, $e);
        }

        return $response->doPayTResult->errors ?? false;
    }
}